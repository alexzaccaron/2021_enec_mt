
# Snakemake pipeline that maps RNA-seq reads to the mitochondrial genome of E. necator


import pandas as pd

# read a table with sample names and links to download the reads
samples_df = pd.read_table('samples.txt').set_index("sample", drop=False)
SAMPLES = list(samples_df['sample'])



rule all:
   input:
      expand("{sample}.bam", sample=SAMPLES),



##download_reads: download fastq files specified in samples_df
rule download_reads:
   output:
      R1="data/{sample}_downloaded_R1.fastq.gz",    # left end of paired reads
      R2="data/{sample}_downloaded_R2.fastq.gz"     # right end of paired reads
   params:
      #dynamically grab the download link from the "URL_left" and "URL_right" columns in the samples data frame
      download_link_R1 = lambda wildcards: samples_df.loc[wildcards.sample, "URL_left"],
      download_link_R2 = lambda wildcards: samples_df.loc[wildcards.sample, "URL_right"]
   shell: """
      curl -L {params.download_link_R1} -o {output.R1}
      curl -L {params.download_link_R2} -o {output.R2}
    """



##fastp_trim: perform trimming of reads
rule fastp_trim:
   conda: "myenv.yml"
   input:
      R1="data/{sample}_downloaded_R1.fastq.gz",    # left end of paired reads
      R2="data/{sample}_downloaded_R2.fastq.gz"     # right end of paired reads
   output:
      R1="data/{sample}_QCd_R1.fastq.gz",    # left end of paired reads after trimming
      R2="data/{sample}_QCd_R2.fastq.gz",    # eight end of paired reads after trimming
      html="{sample}_fastp.html",      # HTML report
      json="{sample}_fastp.json"       # JSON report
   params:
      cpus=4,        # number of cores to use
      minlen=40     # minimum length of reads after trimming
   shell: """
      fastp \
         --in1 {input.R1}       \
         --in2 {input.R2}       \
         --out1 {output.R1}     \
         --out2 {output.R2}     \
         --html {output.html}   \
         --json {output.json}   \
         --thread {params.cpus} \
         --length_required {params.minlen}
   """



##download_mt_genome: download the mitochondrial genome using efetch
rule download_mt_genome:
   conda: "myenv.yml"
   output:
      "MT880588.1.fasta"    # fasta file
   shell: """
      efetch -db nuccore -id  MT880588.1 -format fasta > {output}
   """



##hisat_build: build index for HISAT
rule hisat_build:
   conda: "myenv.yml"
   input:
      ref="MT880588.1.fasta"   # fasta file
   output:
      idx_part="MT880588.1.fasta.1.ht2"   # one of the index files
   shell: """
      hisat2-build {input.ref} {input.ref}
   """



##hisat: map reads with HISAT
rule hisat:
   conda: "myenv.yml"
   input:
      R1="data/{sample}_QCd_R1.fastq.gz",    # left end of paired reads after trimming
      R2="data/{sample}_QCd_R2.fastq.gz",    # eight end of paired reads after trimming
      ref="MT880588.1.fasta",                 # HISAT index name
      idx_part="MT880588.1.fasta.1.ht2"       # make sure hisat2-build was called
   output:
      bam="{sample}.bam"       # output BAM file
   shell: """
     hisat2 -x {input.ref}    \
        --threads 4           \
        --summary-file "{wildcards.sample}_ht2_summary.txt" \
        --min-intronlen 20    \
        --max-intronlen 5000  \
        --no-unal             \
        -1 {input.R1} -2 {input.R2} | samtools sort -o {output.bam}
   """

